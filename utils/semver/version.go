package semver

import (
	"context"
	"embed"
	"regexp"
	"strings"

	"github.com/ARM-software/golang-utils/utils/commonerrors"
	"github.com/ARM-software/golang-utils/utils/field"
	"github.com/ARM-software/golang-utils/utils/filesystem"
	"github.com/ARM-software/golang-utils/utils/parallelisation"
)

var (
	versionRegex = regexp.MustCompile(`Version=(?P<Version>.*)`)
)

const (
	DefaultVersionFile = "module.properties"
)

// DetermineEmbeddedVersion retrieves the version information of a project from embedded files.
func DetermineEmbeddedVersion(ctx context.Context, fs *embed.FS, versionFilePath *string) (version string, err error) {
	eFs, err := filesystem.NewEmbedFileSystem(fs)
	if err != nil {
		return
	}
	version, err = DetermineVersionFromFile(ctx, eFs, field.OptionalString(versionFilePath, DefaultVersionFile))
	return
}

// DetermineVersionFromFile retrieves the information about the version of a project based on a version file generated by [autoversion](https://github.com/ARMmbed/autoversion).
// The Canonical version is returned.
func DetermineVersionFromFile(ctx context.Context, fs filesystem.FS, versionFilePath string) (version string, err error) {
	err = parallelisation.DetermineContextError(ctx)
	if err != nil {
		return
	}
	if fs == nil {
		err = commonerrors.UndefinedVariable("file system")
		return
	}
	versionFilePath = strings.TrimSpace(versionFilePath)
	if versionFilePath == "" {
		err = commonerrors.UndefinedVariable("version file path")
		return
	}
	if !fs.Exists(versionFilePath) {
		err = commonerrors.Newf(commonerrors.ErrNotFound, "version file [%v] was not found", versionFilePath)
		return
	}

	content, err := fs.ReadFileWithContext(ctx, versionFilePath)
	if err != nil {
		err = commonerrors.WrapError(commonerrors.ErrMarshalling, err, "failed reading version file")
		return
	}

	matches := versionRegex.FindSubmatch(content)
	if len(matches) != 2 {
		err = commonerrors.Newf(commonerrors.ErrConflict, "expected to find one entry matching ^%v$ in embedded properties file but did not", versionRegex.String())
		return
	}
	version, err = Canonical(string(matches[1]))
	if err != nil {
		err = commonerrors.WrapError(commonerrors.ErrInvalid, err, "invalid version")
	}
	return
}
