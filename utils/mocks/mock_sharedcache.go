// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/sharedcache (interfaces: ISharedCacheRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockISharedCacheRepository is a mock of ISharedCacheRepository interface.
type MockISharedCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISharedCacheRepositoryMockRecorder
}

// MockISharedCacheRepositoryMockRecorder is the mock recorder for MockISharedCacheRepository.
type MockISharedCacheRepositoryMockRecorder struct {
	mock *MockISharedCacheRepository
}

// NewMockISharedCacheRepository creates a new mock instance.
func NewMockISharedCacheRepository(ctrl *gomock.Controller) *MockISharedCacheRepository {
	mock := &MockISharedCacheRepository{ctrl: ctrl}
	mock.recorder = &MockISharedCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISharedCacheRepository) EXPECT() *MockISharedCacheRepositoryMockRecorder {
	return m.recorder
}

// CleanEntry mocks base method.
func (m *MockISharedCacheRepository) CleanEntry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanEntry indicates an expected call of CleanEntry.
func (mr *MockISharedCacheRepositoryMockRecorder) CleanEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanEntry", reflect.TypeOf((*MockISharedCacheRepository)(nil).CleanEntry), arg0, arg1)
}

// EntriesCount mocks base method.
func (m *MockISharedCacheRepository) EntriesCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntriesCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntriesCount indicates an expected call of EntriesCount.
func (mr *MockISharedCacheRepositoryMockRecorder) EntriesCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntriesCount", reflect.TypeOf((*MockISharedCacheRepository)(nil).EntriesCount), arg0)
}

// Fetch mocks base method.
func (m *MockISharedCacheRepository) Fetch(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockISharedCacheRepositoryMockRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockISharedCacheRepository)(nil).Fetch), arg0, arg1, arg2)
}

// GenerateKey mocks base method.
func (m *MockISharedCacheRepository) GenerateKey(arg0 ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateKey", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockISharedCacheRepositoryMockRecorder) GenerateKey(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockISharedCacheRepository)(nil).GenerateKey), arg0...)
}

// GetEntries mocks base method.
func (m *MockISharedCacheRepository) GetEntries(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockISharedCacheRepositoryMockRecorder) GetEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockISharedCacheRepository)(nil).GetEntries), arg0)
}

// GetEntryAge mocks base method.
func (m *MockISharedCacheRepository) GetEntryAge(arg0 context.Context, arg1 string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryAge", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryAge indicates an expected call of GetEntryAge.
func (mr *MockISharedCacheRepositoryMockRecorder) GetEntryAge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryAge", reflect.TypeOf((*MockISharedCacheRepository)(nil).GetEntryAge), arg0, arg1)
}

// RemoveEntry mocks base method.
func (m *MockISharedCacheRepository) RemoveEntry(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntry indicates an expected call of RemoveEntry.
func (mr *MockISharedCacheRepositoryMockRecorder) RemoveEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntry", reflect.TypeOf((*MockISharedCacheRepository)(nil).RemoveEntry), arg0, arg1)
}

// SetEntryAge mocks base method.
func (m *MockISharedCacheRepository) SetEntryAge(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEntryAge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEntryAge indicates an expected call of SetEntryAge.
func (mr *MockISharedCacheRepositoryMockRecorder) SetEntryAge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntryAge", reflect.TypeOf((*MockISharedCacheRepository)(nil).SetEntryAge), arg0, arg1, arg2)
}

// Store mocks base method.
func (m *MockISharedCacheRepository) Store(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockISharedCacheRepositoryMockRecorder) Store(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockISharedCacheRepository)(nil).Store), arg0, arg1, arg2)
}
