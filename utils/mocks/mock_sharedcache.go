// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/sharedcache (interfaces: ISharedCacheRepository)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_sharedcache.go -package=mocks github.com/ARM-software/golang-utils/utils/sharedcache ISharedCacheRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockISharedCacheRepository is a mock of ISharedCacheRepository interface.
type MockISharedCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISharedCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockISharedCacheRepositoryMockRecorder is the mock recorder for MockISharedCacheRepository.
type MockISharedCacheRepositoryMockRecorder struct {
	mock *MockISharedCacheRepository
}

// NewMockISharedCacheRepository creates a new mock instance.
func NewMockISharedCacheRepository(ctrl *gomock.Controller) *MockISharedCacheRepository {
	mock := &MockISharedCacheRepository{ctrl: ctrl}
	mock.recorder = &MockISharedCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISharedCacheRepository) EXPECT() *MockISharedCacheRepositoryMockRecorder {
	return m.recorder
}

// CleanEntry mocks base method.
func (m *MockISharedCacheRepository) CleanEntry(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanEntry", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanEntry indicates an expected call of CleanEntry.
func (mr *MockISharedCacheRepositoryMockRecorder) CleanEntry(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanEntry", reflect.TypeOf((*MockISharedCacheRepository)(nil).CleanEntry), ctx, key)
}

// EntriesCount mocks base method.
func (m *MockISharedCacheRepository) EntriesCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntriesCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntriesCount indicates an expected call of EntriesCount.
func (mr *MockISharedCacheRepositoryMockRecorder) EntriesCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntriesCount", reflect.TypeOf((*MockISharedCacheRepository)(nil).EntriesCount), ctx)
}

// Fetch mocks base method.
func (m *MockISharedCacheRepository) Fetch(ctx context.Context, key, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockISharedCacheRepositoryMockRecorder) Fetch(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockISharedCacheRepository)(nil).Fetch), ctx, key, dest)
}

// GenerateKey mocks base method.
func (m *MockISharedCacheRepository) GenerateKey(elems ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range elems {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateKey", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockISharedCacheRepositoryMockRecorder) GenerateKey(elems ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockISharedCacheRepository)(nil).GenerateKey), elems...)
}

// GetEntries mocks base method.
func (m *MockISharedCacheRepository) GetEntries(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockISharedCacheRepositoryMockRecorder) GetEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockISharedCacheRepository)(nil).GetEntries), ctx)
}

// GetEntryAge mocks base method.
func (m *MockISharedCacheRepository) GetEntryAge(ctx context.Context, key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryAge", ctx, key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryAge indicates an expected call of GetEntryAge.
func (mr *MockISharedCacheRepositoryMockRecorder) GetEntryAge(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryAge", reflect.TypeOf((*MockISharedCacheRepository)(nil).GetEntryAge), ctx, key)
}

// RemoveEntry mocks base method.
func (m *MockISharedCacheRepository) RemoveEntry(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntry", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntry indicates an expected call of RemoveEntry.
func (mr *MockISharedCacheRepositoryMockRecorder) RemoveEntry(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntry", reflect.TypeOf((*MockISharedCacheRepository)(nil).RemoveEntry), ctx, key)
}

// SetEntryAge mocks base method.
func (m *MockISharedCacheRepository) SetEntryAge(ctx context.Context, key string, age time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEntryAge", ctx, key, age)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEntryAge indicates an expected call of SetEntryAge.
func (mr *MockISharedCacheRepositoryMockRecorder) SetEntryAge(ctx, key, age any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntryAge", reflect.TypeOf((*MockISharedCacheRepository)(nil).SetEntryAge), ctx, key, age)
}

// Store mocks base method.
func (m *MockISharedCacheRepository) Store(ctx context.Context, key, src string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, key, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockISharedCacheRepositoryMockRecorder) Store(ctx, key, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockISharedCacheRepository)(nil).Store), ctx, key, src)
}
