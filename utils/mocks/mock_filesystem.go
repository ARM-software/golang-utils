// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/filesystem (interfaces: IFileHash,Chowner,Linker,File,DiskUsage,FileTimeInfo,ILock,ILimits,FS)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	fs "io/fs"
	filepath "path/filepath"
	reflect "reflect"
	time "time"

	doublestar "github.com/bmatcuk/doublestar/v3"
	gomock "github.com/golang/mock/gomock"

	filesystem "github.com/ARM-software/golang-utils/utils/filesystem"
)

// MockIFileHash is a mock of IFileHash interface
type MockIFileHash struct {
	ctrl     *gomock.Controller
	recorder *MockIFileHashMockRecorder
}

// MockIFileHashMockRecorder is the mock recorder for MockIFileHash
type MockIFileHashMockRecorder struct {
	mock *MockIFileHash
}

// NewMockIFileHash creates a new mock instance
func NewMockIFileHash(ctrl *gomock.Controller) *MockIFileHash {
	mock := &MockIFileHash{ctrl: ctrl}
	mock.recorder = &MockIFileHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFileHash) EXPECT() *MockIFileHashMockRecorder {
	return m.recorder
}

// Calculate mocks base method
func (m *MockIFileHash) Calculate(arg0 filesystem.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate
func (mr *MockIFileHashMockRecorder) Calculate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockIFileHash)(nil).Calculate), arg0)
}

// CalculateFile mocks base method
func (m *MockIFileHash) CalculateFile(arg0 filesystem.FS, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateFile indicates an expected call of CalculateFile
func (mr *MockIFileHashMockRecorder) CalculateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateFile", reflect.TypeOf((*MockIFileHash)(nil).CalculateFile), arg0, arg1)
}

// GetType mocks base method
func (m *MockIFileHash) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockIFileHashMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIFileHash)(nil).GetType))
}

// MockChowner is a mock of Chowner interface
type MockChowner struct {
	ctrl     *gomock.Controller
	recorder *MockChownerMockRecorder
}

// MockChownerMockRecorder is the mock recorder for MockChowner
type MockChownerMockRecorder struct {
	mock *MockChowner
}

// NewMockChowner creates a new mock instance
func NewMockChowner(ctrl *gomock.Controller) *MockChowner {
	mock := &MockChowner{ctrl: ctrl}
	mock.recorder = &MockChownerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChowner) EXPECT() *MockChownerMockRecorder {
	return m.recorder
}

// ChownIfPossible mocks base method
func (m *MockChowner) ChownIfPossible(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChownIfPossible", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChownIfPossible indicates an expected call of ChownIfPossible
func (mr *MockChownerMockRecorder) ChownIfPossible(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChownIfPossible", reflect.TypeOf((*MockChowner)(nil).ChownIfPossible), arg0, arg1, arg2)
}

// MockLinker is a mock of Linker interface
type MockLinker struct {
	ctrl     *gomock.Controller
	recorder *MockLinkerMockRecorder
}

// MockLinkerMockRecorder is the mock recorder for MockLinker
type MockLinkerMockRecorder struct {
	mock *MockLinker
}

// NewMockLinker creates a new mock instance
func NewMockLinker(ctrl *gomock.Controller) *MockLinker {
	mock := &MockLinker{ctrl: ctrl}
	mock.recorder = &MockLinkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinker) EXPECT() *MockLinkerMockRecorder {
	return m.recorder
}

// LinkIfPossible mocks base method
func (m *MockLinker) LinkIfPossible(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkIfPossible", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkIfPossible indicates an expected call of LinkIfPossible
func (mr *MockLinkerMockRecorder) LinkIfPossible(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkIfPossible", reflect.TypeOf((*MockLinker)(nil).LinkIfPossible), arg0, arg1)
}

// MockFile is a mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Fd mocks base method
func (m *MockFile) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd
func (mr *MockFileMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockFile)(nil).Fd))
}

// Name mocks base method
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Read mocks base method
func (m *MockFile) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockFileMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), arg0)
}

// ReadAt mocks base method
func (m *MockFile) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt
func (mr *MockFileMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), arg0, arg1)
}

// Readdir mocks base method
func (m *MockFile) Readdir(arg0 int) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readdir", arg0)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readdir indicates an expected call of Readdir
func (mr *MockFileMockRecorder) Readdir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readdir", reflect.TypeOf((*MockFile)(nil).Readdir), arg0)
}

// Readdirnames mocks base method
func (m *MockFile) Readdirnames(arg0 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readdirnames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readdirnames indicates an expected call of Readdirnames
func (mr *MockFileMockRecorder) Readdirnames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readdirnames", reflect.TypeOf((*MockFile)(nil).Readdirnames), arg0)
}

// Seek mocks base method
func (m *MockFile) Seek(arg0 int64, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockFileMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), arg0, arg1)
}

// Stat mocks base method
func (m *MockFile) Stat() (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// Sync mocks base method
func (m *MockFile) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockFileMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockFile)(nil).Sync))
}

// Truncate mocks base method
func (m *MockFile) Truncate(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate
func (mr *MockFileMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockFile)(nil).Truncate), arg0)
}

// Write mocks base method
func (m *MockFile) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFileMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFile)(nil).Write), arg0)
}

// WriteAt mocks base method
func (m *MockFile) WriteAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt
func (mr *MockFileMockRecorder) WriteAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), arg0, arg1)
}

// WriteString mocks base method
func (m *MockFile) WriteString(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MockFileMockRecorder) WriteString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockFile)(nil).WriteString), arg0)
}

// MockDiskUsage is a mock of DiskUsage interface
type MockDiskUsage struct {
	ctrl     *gomock.Controller
	recorder *MockDiskUsageMockRecorder
}

// MockDiskUsageMockRecorder is the mock recorder for MockDiskUsage
type MockDiskUsageMockRecorder struct {
	mock *MockDiskUsage
}

// NewMockDiskUsage creates a new mock instance
func NewMockDiskUsage(ctrl *gomock.Controller) *MockDiskUsage {
	mock := &MockDiskUsage{ctrl: ctrl}
	mock.recorder = &MockDiskUsageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiskUsage) EXPECT() *MockDiskUsageMockRecorder {
	return m.recorder
}

// GetFree mocks base method
func (m *MockDiskUsage) GetFree() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFree")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetFree indicates an expected call of GetFree
func (mr *MockDiskUsageMockRecorder) GetFree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFree", reflect.TypeOf((*MockDiskUsage)(nil).GetFree))
}

// GetInodesFree mocks base method
func (m *MockDiskUsage) GetInodesFree() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInodesFree")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetInodesFree indicates an expected call of GetInodesFree
func (mr *MockDiskUsageMockRecorder) GetInodesFree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInodesFree", reflect.TypeOf((*MockDiskUsage)(nil).GetInodesFree))
}

// GetInodesTotal mocks base method
func (m *MockDiskUsage) GetInodesTotal() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInodesTotal")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetInodesTotal indicates an expected call of GetInodesTotal
func (mr *MockDiskUsageMockRecorder) GetInodesTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInodesTotal", reflect.TypeOf((*MockDiskUsage)(nil).GetInodesTotal))
}

// GetInodesUsed mocks base method
func (m *MockDiskUsage) GetInodesUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInodesUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetInodesUsed indicates an expected call of GetInodesUsed
func (mr *MockDiskUsageMockRecorder) GetInodesUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInodesUsed", reflect.TypeOf((*MockDiskUsage)(nil).GetInodesUsed))
}

// GetInodesUsedPercent mocks base method
func (m *MockDiskUsage) GetInodesUsedPercent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInodesUsedPercent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetInodesUsedPercent indicates an expected call of GetInodesUsedPercent
func (mr *MockDiskUsageMockRecorder) GetInodesUsedPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInodesUsedPercent", reflect.TypeOf((*MockDiskUsage)(nil).GetInodesUsedPercent))
}

// GetTotal mocks base method
func (m *MockDiskUsage) GetTotal() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotal indicates an expected call of GetTotal
func (mr *MockDiskUsageMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockDiskUsage)(nil).GetTotal))
}

// GetUsed mocks base method
func (m *MockDiskUsage) GetUsed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUsed indicates an expected call of GetUsed
func (mr *MockDiskUsageMockRecorder) GetUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsed", reflect.TypeOf((*MockDiskUsage)(nil).GetUsed))
}

// GetUsedPercent mocks base method
func (m *MockDiskUsage) GetUsedPercent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedPercent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetUsedPercent indicates an expected call of GetUsedPercent
func (mr *MockDiskUsageMockRecorder) GetUsedPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedPercent", reflect.TypeOf((*MockDiskUsage)(nil).GetUsedPercent))
}

// MockFileTimeInfo is a mock of FileTimeInfo interface
type MockFileTimeInfo struct {
	ctrl     *gomock.Controller
	recorder *MockFileTimeInfoMockRecorder
}

// MockFileTimeInfoMockRecorder is the mock recorder for MockFileTimeInfo
type MockFileTimeInfoMockRecorder struct {
	mock *MockFileTimeInfo
}

// NewMockFileTimeInfo creates a new mock instance
func NewMockFileTimeInfo(ctrl *gomock.Controller) *MockFileTimeInfo {
	mock := &MockFileTimeInfo{ctrl: ctrl}
	mock.recorder = &MockFileTimeInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileTimeInfo) EXPECT() *MockFileTimeInfoMockRecorder {
	return m.recorder
}

// AccessTime mocks base method
func (m *MockFileTimeInfo) AccessTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// AccessTime indicates an expected call of AccessTime
func (mr *MockFileTimeInfoMockRecorder) AccessTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTime", reflect.TypeOf((*MockFileTimeInfo)(nil).AccessTime))
}

// BirthTime mocks base method
func (m *MockFileTimeInfo) BirthTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BirthTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// BirthTime indicates an expected call of BirthTime
func (mr *MockFileTimeInfoMockRecorder) BirthTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BirthTime", reflect.TypeOf((*MockFileTimeInfo)(nil).BirthTime))
}

// ChangeTime mocks base method
func (m *MockFileTimeInfo) ChangeTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ChangeTime indicates an expected call of ChangeTime
func (mr *MockFileTimeInfoMockRecorder) ChangeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTime", reflect.TypeOf((*MockFileTimeInfo)(nil).ChangeTime))
}

// HasAccessTime mocks base method
func (m *MockFileTimeInfo) HasAccessTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccessTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAccessTime indicates an expected call of HasAccessTime
func (mr *MockFileTimeInfoMockRecorder) HasAccessTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccessTime", reflect.TypeOf((*MockFileTimeInfo)(nil).HasAccessTime))
}

// HasBirthTime mocks base method
func (m *MockFileTimeInfo) HasBirthTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBirthTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBirthTime indicates an expected call of HasBirthTime
func (mr *MockFileTimeInfoMockRecorder) HasBirthTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBirthTime", reflect.TypeOf((*MockFileTimeInfo)(nil).HasBirthTime))
}

// HasChangeTime mocks base method
func (m *MockFileTimeInfo) HasChangeTime() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChangeTime")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChangeTime indicates an expected call of HasChangeTime
func (mr *MockFileTimeInfoMockRecorder) HasChangeTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChangeTime", reflect.TypeOf((*MockFileTimeInfo)(nil).HasChangeTime))
}

// ModTime mocks base method
func (m *MockFileTimeInfo) ModTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime
func (mr *MockFileTimeInfoMockRecorder) ModTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockFileTimeInfo)(nil).ModTime))
}

// MockILock is a mock of ILock interface
type MockILock struct {
	ctrl     *gomock.Controller
	recorder *MockILockMockRecorder
}

// MockILockMockRecorder is the mock recorder for MockILock
type MockILockMockRecorder struct {
	mock *MockILock
}

// NewMockILock creates a new mock instance
func NewMockILock(ctrl *gomock.Controller) *MockILock {
	mock := &MockILock{ctrl: ctrl}
	mock.recorder = &MockILockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockILock) EXPECT() *MockILockMockRecorder {
	return m.recorder
}

// IsStale mocks base method
func (m *MockILock) IsStale() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStale")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStale indicates an expected call of IsStale
func (mr *MockILockMockRecorder) IsStale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStale", reflect.TypeOf((*MockILock)(nil).IsStale))
}

// Lock mocks base method
func (m *MockILock) Lock(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockILockMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockILock)(nil).Lock), arg0)
}

// LockWithTimeout mocks base method
func (m *MockILock) LockWithTimeout(arg0 context.Context, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockWithTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockWithTimeout indicates an expected call of LockWithTimeout
func (mr *MockILockMockRecorder) LockWithTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockWithTimeout", reflect.TypeOf((*MockILock)(nil).LockWithTimeout), arg0, arg1)
}

// MakeStale mocks base method
func (m *MockILock) MakeStale(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeStale", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeStale indicates an expected call of MakeStale
func (mr *MockILockMockRecorder) MakeStale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeStale", reflect.TypeOf((*MockILock)(nil).MakeStale), arg0)
}

// ReleaseIfStale mocks base method
func (m *MockILock) ReleaseIfStale(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIfStale", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIfStale indicates an expected call of ReleaseIfStale
func (mr *MockILockMockRecorder) ReleaseIfStale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIfStale", reflect.TypeOf((*MockILock)(nil).ReleaseIfStale), arg0)
}

// TryLock mocks base method
func (m *MockILock) TryLock(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryLock indicates an expected call of TryLock
func (mr *MockILockMockRecorder) TryLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockILock)(nil).TryLock), arg0)
}

// Unlock mocks base method
func (m *MockILock) Unlock(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockILockMockRecorder) Unlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockILock)(nil).Unlock), arg0)
}

// MockILimits is a mock of ILimits interface
type MockILimits struct {
	ctrl     *gomock.Controller
	recorder *MockILimitsMockRecorder
}

// MockILimitsMockRecorder is the mock recorder for MockILimits
type MockILimitsMockRecorder struct {
	mock *MockILimits
}

// NewMockILimits creates a new mock instance
func NewMockILimits(ctrl *gomock.Controller) *MockILimits {
	mock := &MockILimits{ctrl: ctrl}
	mock.recorder = &MockILimitsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockILimits) EXPECT() *MockILimitsMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockILimits) Apply() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockILimitsMockRecorder) Apply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockILimits)(nil).Apply))
}

// GetMaxFileCount mocks base method
func (m *MockILimits) GetMaxFileCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFileCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMaxFileCount indicates an expected call of GetMaxFileCount
func (mr *MockILimitsMockRecorder) GetMaxFileCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFileCount", reflect.TypeOf((*MockILimits)(nil).GetMaxFileCount))
}

// GetMaxFileSize mocks base method
func (m *MockILimits) GetMaxFileSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFileSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMaxFileSize indicates an expected call of GetMaxFileSize
func (mr *MockILimitsMockRecorder) GetMaxFileSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFileSize", reflect.TypeOf((*MockILimits)(nil).GetMaxFileSize))
}

// GetMaxTotalSize mocks base method
func (m *MockILimits) GetMaxTotalSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxTotalSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxTotalSize indicates an expected call of GetMaxTotalSize
func (mr *MockILimitsMockRecorder) GetMaxTotalSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxTotalSize", reflect.TypeOf((*MockILimits)(nil).GetMaxTotalSize))
}

// GetMaxZipDepth mocks base method
func (m *MockILimits) GetMaxZipDepth() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxZipDepth")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMaxZipDepth indicates an expected call of GetMaxZipDepth
func (mr *MockILimitsMockRecorder) GetMaxZipDepth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxZipDepth", reflect.TypeOf((*MockILimits)(nil).GetMaxZipDepth))
}

// Validate mocks base method
func (m *MockILimits) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockILimitsMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockILimits)(nil).Validate))
}

// MockFS is a mock of FS interface
type MockFS struct {
	ctrl     *gomock.Controller
	recorder *MockFSMockRecorder
}

// MockFSMockRecorder is the mock recorder for MockFS
type MockFSMockRecorder struct {
	mock *MockFS
}

// NewMockFS creates a new mock instance
func NewMockFS(ctrl *gomock.Controller) *MockFS {
	mock := &MockFS{ctrl: ctrl}
	mock.recorder = &MockFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFS) EXPECT() *MockFSMockRecorder {
	return m.recorder
}

// Chmod mocks base method
func (m *MockFS) Chmod(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod
func (mr *MockFSMockRecorder) Chmod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockFS)(nil).Chmod), arg0, arg1)
}

// Chown mocks base method
func (m *MockFS) Chown(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown
func (mr *MockFSMockRecorder) Chown(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockFS)(nil).Chown), arg0, arg1, arg2)
}

// Chtimes mocks base method
func (m *MockFS) Chtimes(arg0 string, arg1, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chtimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes
func (mr *MockFSMockRecorder) Chtimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockFS)(nil).Chtimes), arg0, arg1, arg2)
}

// CleanDir mocks base method
func (m *MockFS) CleanDir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanDir indicates an expected call of CleanDir
func (mr *MockFSMockRecorder) CleanDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanDir", reflect.TypeOf((*MockFS)(nil).CleanDir), arg0)
}

// CleanDirWithContext mocks base method
func (m *MockFS) CleanDirWithContext(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanDirWithContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanDirWithContext indicates an expected call of CleanDirWithContext
func (mr *MockFSMockRecorder) CleanDirWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanDirWithContext", reflect.TypeOf((*MockFS)(nil).CleanDirWithContext), arg0, arg1)
}

// CleanDirWithContextAndExclusionPatterns mocks base method
func (m *MockFS) CleanDirWithContextAndExclusionPatterns(arg0 context.Context, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanDirWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanDirWithContextAndExclusionPatterns indicates an expected call of CleanDirWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) CleanDirWithContextAndExclusionPatterns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanDirWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).CleanDirWithContextAndExclusionPatterns), varargs...)
}

// ConvertFilePath mocks base method
func (m *MockFS) ConvertFilePath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertFilePath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConvertFilePath indicates an expected call of ConvertFilePath
func (mr *MockFSMockRecorder) ConvertFilePath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFilePath", reflect.TypeOf((*MockFS)(nil).ConvertFilePath), arg0)
}

// ConvertToAbsolutePath mocks base method
func (m *MockFS) ConvertToAbsolutePath(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertToAbsolutePath", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToAbsolutePath indicates an expected call of ConvertToAbsolutePath
func (mr *MockFSMockRecorder) ConvertToAbsolutePath(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToAbsolutePath", reflect.TypeOf((*MockFS)(nil).ConvertToAbsolutePath), varargs...)
}

// ConvertToRelativePath mocks base method
func (m *MockFS) ConvertToRelativePath(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertToRelativePath", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToRelativePath indicates an expected call of ConvertToRelativePath
func (mr *MockFSMockRecorder) ConvertToRelativePath(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToRelativePath", reflect.TypeOf((*MockFS)(nil).ConvertToRelativePath), varargs...)
}

// Copy mocks base method
func (m *MockFS) Copy(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockFSMockRecorder) Copy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockFS)(nil).Copy), arg0, arg1)
}

// CopyWithContext mocks base method
func (m *MockFS) CopyWithContext(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyWithContext indicates an expected call of CopyWithContext
func (mr *MockFSMockRecorder) CopyWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWithContext", reflect.TypeOf((*MockFS)(nil).CopyWithContext), arg0, arg1, arg2)
}

// CopyWithContextAndExclusionPatterns mocks base method
func (m *MockFS) CopyWithContextAndExclusionPatterns(arg0 context.Context, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyWithContextAndExclusionPatterns indicates an expected call of CopyWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) CopyWithContextAndExclusionPatterns(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).CopyWithContextAndExclusionPatterns), varargs...)
}

// CreateFile mocks base method
func (m *MockFS) CreateFile(arg0 string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockFSMockRecorder) CreateFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFS)(nil).CreateFile), arg0)
}

// CurrentDirectory mocks base method
func (m *MockFS) CurrentDirectory() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentDirectory")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentDirectory indicates an expected call of CurrentDirectory
func (mr *MockFSMockRecorder) CurrentDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentDirectory", reflect.TypeOf((*MockFS)(nil).CurrentDirectory))
}

// DiskUsage mocks base method
func (m *MockFS) DiskUsage(arg0 string) (filesystem.DiskUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskUsage", arg0)
	ret0, _ := ret[0].(filesystem.DiskUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskUsage indicates an expected call of DiskUsage
func (mr *MockFSMockRecorder) DiskUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskUsage", reflect.TypeOf((*MockFS)(nil).DiskUsage), arg0)
}

// ExcludeAll mocks base method
func (m *MockFS) ExcludeAll(arg0 []string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExcludeAll", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExcludeAll indicates an expected call of ExcludeAll
func (mr *MockFSMockRecorder) ExcludeAll(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeAll", reflect.TypeOf((*MockFS)(nil).ExcludeAll), varargs...)
}

// Exists mocks base method
func (m *MockFS) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockFSMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFS)(nil).Exists), arg0)
}

// FetchOwners mocks base method
func (m *MockFS) FetchOwners(arg0 string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOwners", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchOwners indicates an expected call of FetchOwners
func (mr *MockFSMockRecorder) FetchOwners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOwners", reflect.TypeOf((*MockFS)(nil).FetchOwners), arg0)
}

// FileHash mocks base method
func (m *MockFS) FileHash(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileHash", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileHash indicates an expected call of FileHash
func (mr *MockFSMockRecorder) FileHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileHash", reflect.TypeOf((*MockFS)(nil).FileHash), arg0, arg1)
}

// FindAll mocks base method
func (m *MockFS) FindAll(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockFSMockRecorder) FindAll(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFS)(nil).FindAll), varargs...)
}

// GarbageCollect mocks base method
func (m *MockFS) GarbageCollect(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollect indicates an expected call of GarbageCollect
func (mr *MockFSMockRecorder) GarbageCollect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockFS)(nil).GarbageCollect), arg0, arg1)
}

// GarbageCollectWithContext mocks base method
func (m *MockFS) GarbageCollectWithContext(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollectWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollectWithContext indicates an expected call of GarbageCollectWithContext
func (mr *MockFSMockRecorder) GarbageCollectWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollectWithContext", reflect.TypeOf((*MockFS)(nil).GarbageCollectWithContext), arg0, arg1, arg2)
}

// GenericOpen mocks base method
func (m *MockFS) GenericOpen(arg0 string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericOpen", arg0)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenericOpen indicates an expected call of GenericOpen
func (mr *MockFSMockRecorder) GenericOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOpen", reflect.TypeOf((*MockFS)(nil).GenericOpen), arg0)
}

// GetFileSize mocks base method
func (m *MockFS) GetFileSize(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize
func (mr *MockFSMockRecorder) GetFileSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFS)(nil).GetFileSize), arg0)
}

// GetType mocks base method
func (m *MockFS) GetType() filesystem.FilesystemType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(filesystem.FilesystemType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockFSMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockFS)(nil).GetType))
}

// IsDir mocks base method
func (m *MockFS) IsDir(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDir indicates an expected call of IsDir
func (mr *MockFSMockRecorder) IsDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockFS)(nil).IsDir), arg0)
}

// IsEmpty mocks base method
func (m *MockFS) IsEmpty(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockFSMockRecorder) IsEmpty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockFS)(nil).IsEmpty), arg0)
}

// IsFile mocks base method
func (m *MockFS) IsFile(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFile indicates an expected call of IsFile
func (mr *MockFSMockRecorder) IsFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFile", reflect.TypeOf((*MockFS)(nil).IsFile), arg0)
}

// IsLink mocks base method
func (m *MockFS) IsLink(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLink", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLink indicates an expected call of IsLink
func (mr *MockFSMockRecorder) IsLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLink", reflect.TypeOf((*MockFS)(nil).IsLink), arg0)
}

// IsZip mocks base method
func (m *MockFS) IsZip(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsZip", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsZip indicates an expected call of IsZip
func (mr *MockFSMockRecorder) IsZip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsZip", reflect.TypeOf((*MockFS)(nil).IsZip), arg0)
}

// Link mocks base method
func (m *MockFS) Link(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Link indicates an expected call of Link
func (mr *MockFSMockRecorder) Link(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockFS)(nil).Link), arg0, arg1)
}

// ListDirTree mocks base method
func (m *MockFS) ListDirTree(arg0 string, arg1 *[]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirTree", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirTree indicates an expected call of ListDirTree
func (mr *MockFSMockRecorder) ListDirTree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirTree", reflect.TypeOf((*MockFS)(nil).ListDirTree), arg0, arg1)
}

// ListDirTreeWithContext mocks base method
func (m *MockFS) ListDirTreeWithContext(arg0 context.Context, arg1 string, arg2 *[]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirTreeWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirTreeWithContext indicates an expected call of ListDirTreeWithContext
func (mr *MockFSMockRecorder) ListDirTreeWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirTreeWithContext", reflect.TypeOf((*MockFS)(nil).ListDirTreeWithContext), arg0, arg1, arg2)
}

// ListDirTreeWithContextAndExclusionPatterns mocks base method
func (m *MockFS) ListDirTreeWithContextAndExclusionPatterns(arg0 context.Context, arg1 string, arg2 *[]string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDirTreeWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirTreeWithContextAndExclusionPatterns indicates an expected call of ListDirTreeWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) ListDirTreeWithContextAndExclusionPatterns(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirTreeWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).ListDirTreeWithContextAndExclusionPatterns), varargs...)
}

// Lls mocks base method
func (m *MockFS) Lls(arg0 string) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lls", arg0)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lls indicates an expected call of Lls
func (mr *MockFSMockRecorder) Lls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lls", reflect.TypeOf((*MockFS)(nil).Lls), arg0)
}

// LlsFromOpenedDirectory mocks base method
func (m *MockFS) LlsFromOpenedDirectory(arg0 filesystem.File) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LlsFromOpenedDirectory", arg0)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlsFromOpenedDirectory indicates an expected call of LlsFromOpenedDirectory
func (mr *MockFSMockRecorder) LlsFromOpenedDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlsFromOpenedDirectory", reflect.TypeOf((*MockFS)(nil).LlsFromOpenedDirectory), arg0)
}

// Ls mocks base method
func (m *MockFS) Ls(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ls", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ls indicates an expected call of Ls
func (mr *MockFSMockRecorder) Ls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ls", reflect.TypeOf((*MockFS)(nil).Ls), arg0)
}

// LsFromOpenedDirectory mocks base method
func (m *MockFS) LsFromOpenedDirectory(arg0 filesystem.File) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LsFromOpenedDirectory", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LsFromOpenedDirectory indicates an expected call of LsFromOpenedDirectory
func (mr *MockFSMockRecorder) LsFromOpenedDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LsFromOpenedDirectory", reflect.TypeOf((*MockFS)(nil).LsFromOpenedDirectory), arg0)
}

// LsWithExclusionPatterns mocks base method
func (m *MockFS) LsWithExclusionPatterns(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LsWithExclusionPatterns", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LsWithExclusionPatterns indicates an expected call of LsWithExclusionPatterns
func (mr *MockFSMockRecorder) LsWithExclusionPatterns(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LsWithExclusionPatterns", reflect.TypeOf((*MockFS)(nil).LsWithExclusionPatterns), varargs...)
}

// Lstat mocks base method
func (m *MockFS) Lstat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat
func (mr *MockFSMockRecorder) Lstat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockFS)(nil).Lstat), arg0)
}

// MkDir mocks base method
func (m *MockFS) MkDir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkDir indicates an expected call of MkDir
func (mr *MockFSMockRecorder) MkDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkDir", reflect.TypeOf((*MockFS)(nil).MkDir), arg0)
}

// MkDirAll mocks base method
func (m *MockFS) MkDirAll(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkDirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkDirAll indicates an expected call of MkDirAll
func (mr *MockFSMockRecorder) MkDirAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkDirAll", reflect.TypeOf((*MockFS)(nil).MkDirAll), arg0, arg1)
}

// Move mocks base method
func (m *MockFS) Move(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockFSMockRecorder) Move(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockFS)(nil).Move), arg0, arg1)
}

// MoveWithContext mocks base method
func (m *MockFS) MoveWithContext(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveWithContext indicates an expected call of MoveWithContext
func (mr *MockFSMockRecorder) MoveWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveWithContext", reflect.TypeOf((*MockFS)(nil).MoveWithContext), arg0, arg1, arg2)
}

// NewRemoteLockFile mocks base method
func (m *MockFS) NewRemoteLockFile(arg0, arg1 string) filesystem.ILock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRemoteLockFile", arg0, arg1)
	ret0, _ := ret[0].(filesystem.ILock)
	return ret0
}

// NewRemoteLockFile indicates an expected call of NewRemoteLockFile
func (mr *MockFSMockRecorder) NewRemoteLockFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRemoteLockFile", reflect.TypeOf((*MockFS)(nil).NewRemoteLockFile), arg0, arg1)
}

// Open mocks base method
func (m *MockFS) Open(arg0 string) (doublestar.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(doublestar.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockFSMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFS)(nil).Open), arg0)
}

// OpenFile mocks base method
func (m *MockFS) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockFSMockRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFS)(nil).OpenFile), arg0, arg1, arg2)
}

// PathSeparator mocks base method
func (m *MockFS) PathSeparator() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathSeparator")
	ret0, _ := ret[0].(int32)
	return ret0
}

// PathSeparator indicates an expected call of PathSeparator
func (mr *MockFSMockRecorder) PathSeparator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathSeparator", reflect.TypeOf((*MockFS)(nil).PathSeparator))
}

// ReadFile mocks base method
func (m *MockFS) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockFSMockRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFS)(nil).ReadFile), arg0)
}

// ReadFileWithLimits mocks base method
func (m *MockFS) ReadFileWithLimits(arg0 string, arg1 filesystem.ILimits) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileWithLimits", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileWithLimits indicates an expected call of ReadFileWithLimits
func (mr *MockFSMockRecorder) ReadFileWithLimits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileWithLimits", reflect.TypeOf((*MockFS)(nil).ReadFileWithLimits), arg0, arg1)
}

// Readlink mocks base method
func (m *MockFS) Readlink(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readlink", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readlink indicates an expected call of Readlink
func (mr *MockFSMockRecorder) Readlink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readlink", reflect.TypeOf((*MockFS)(nil).Readlink), arg0)
}

// RemoveWithContext mocks base method
func (m *MockFS) RemoveWithContext(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWithContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWithContext indicates an expected call of RemoveWithContext
func (mr *MockFSMockRecorder) RemoveWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWithContext", reflect.TypeOf((*MockFS)(nil).RemoveWithContext), arg0, arg1)
}

// RemoveWithContextAndExclusionPatterns mocks base method
func (m *MockFS) RemoveWithContextAndExclusionPatterns(arg0 context.Context, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWithContextAndExclusionPatterns indicates an expected call of RemoveWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) RemoveWithContextAndExclusionPatterns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).RemoveWithContextAndExclusionPatterns), varargs...)
}

// Rm mocks base method
func (m *MockFS) Rm(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rm indicates an expected call of Rm
func (mr *MockFSMockRecorder) Rm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rm", reflect.TypeOf((*MockFS)(nil).Rm), arg0)
}

// Stat mocks base method
func (m *MockFS) Stat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockFSMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFS)(nil).Stat), arg0)
}

// StatTimes mocks base method
func (m *MockFS) StatTimes(arg0 string) (filesystem.FileTimeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatTimes", arg0)
	ret0, _ := ret[0].(filesystem.FileTimeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatTimes indicates an expected call of StatTimes
func (mr *MockFSMockRecorder) StatTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatTimes", reflect.TypeOf((*MockFS)(nil).StatTimes), arg0)
}

// SubDirectories mocks base method
func (m *MockFS) SubDirectories(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubDirectories", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubDirectories indicates an expected call of SubDirectories
func (mr *MockFSMockRecorder) SubDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubDirectories", reflect.TypeOf((*MockFS)(nil).SubDirectories), arg0)
}

// SubDirectoriesWithContext mocks base method
func (m *MockFS) SubDirectoriesWithContext(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubDirectoriesWithContext", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubDirectoriesWithContext indicates an expected call of SubDirectoriesWithContext
func (mr *MockFSMockRecorder) SubDirectoriesWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubDirectoriesWithContext", reflect.TypeOf((*MockFS)(nil).SubDirectoriesWithContext), arg0, arg1)
}

// SubDirectoriesWithContextAndExclusionPatterns mocks base method
func (m *MockFS) SubDirectoriesWithContextAndExclusionPatterns(arg0 context.Context, arg1 string, arg2 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubDirectoriesWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubDirectoriesWithContextAndExclusionPatterns indicates an expected call of SubDirectoriesWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) SubDirectoriesWithContextAndExclusionPatterns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubDirectoriesWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).SubDirectoriesWithContextAndExclusionPatterns), varargs...)
}

// Symlink mocks base method
func (m *MockFS) Symlink(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Symlink indicates an expected call of Symlink
func (mr *MockFSMockRecorder) Symlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockFS)(nil).Symlink), arg0, arg1)
}

// TempDir mocks base method
func (m *MockFS) TempDir(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDir indicates an expected call of TempDir
func (mr *MockFSMockRecorder) TempDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockFS)(nil).TempDir), arg0, arg1)
}

// TempDirInTempDir mocks base method
func (m *MockFS) TempDirInTempDir(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDirInTempDir", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDirInTempDir indicates an expected call of TempDirInTempDir
func (mr *MockFSMockRecorder) TempDirInTempDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDirInTempDir", reflect.TypeOf((*MockFS)(nil).TempDirInTempDir), arg0)
}

// TempDirectory mocks base method
func (m *MockFS) TempDirectory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDirectory")
	ret0, _ := ret[0].(string)
	return ret0
}

// TempDirectory indicates an expected call of TempDirectory
func (mr *MockFSMockRecorder) TempDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDirectory", reflect.TypeOf((*MockFS)(nil).TempDirectory))
}

// TempFile mocks base method
func (m *MockFS) TempFile(arg0, arg1 string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFile", arg0, arg1)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile
func (mr *MockFSMockRecorder) TempFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFile", reflect.TypeOf((*MockFS)(nil).TempFile), arg0, arg1)
}

// TempFileInTempDir mocks base method
func (m *MockFS) TempFileInTempDir(arg0 string) (filesystem.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFileInTempDir", arg0)
	ret0, _ := ret[0].(filesystem.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFileInTempDir indicates an expected call of TempFileInTempDir
func (mr *MockFSMockRecorder) TempFileInTempDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFileInTempDir", reflect.TypeOf((*MockFS)(nil).TempFileInTempDir), arg0)
}

// Unzip mocks base method
func (m *MockFS) Unzip(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unzip", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unzip indicates an expected call of Unzip
func (mr *MockFSMockRecorder) Unzip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unzip", reflect.TypeOf((*MockFS)(nil).Unzip), arg0, arg1)
}

// UnzipWithContext mocks base method
func (m *MockFS) UnzipWithContext(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnzipWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnzipWithContext indicates an expected call of UnzipWithContext
func (mr *MockFSMockRecorder) UnzipWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnzipWithContext", reflect.TypeOf((*MockFS)(nil).UnzipWithContext), arg0, arg1, arg2)
}

// UnzipWithContextAndLimits mocks base method
func (m *MockFS) UnzipWithContextAndLimits(arg0 context.Context, arg1, arg2 string, arg3 filesystem.ILimits) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnzipWithContextAndLimits", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnzipWithContextAndLimits indicates an expected call of UnzipWithContextAndLimits
func (mr *MockFSMockRecorder) UnzipWithContextAndLimits(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnzipWithContextAndLimits", reflect.TypeOf((*MockFS)(nil).UnzipWithContextAndLimits), arg0, arg1, arg2, arg3)
}

// Walk mocks base method
func (m *MockFS) Walk(arg0 string, arg1 filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockFSMockRecorder) Walk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockFS)(nil).Walk), arg0, arg1)
}

// WalkWithContext mocks base method
func (m *MockFS) WalkWithContext(arg0 context.Context, arg1 string, arg2 filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalkWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkWithContext indicates an expected call of WalkWithContext
func (mr *MockFSMockRecorder) WalkWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkWithContext", reflect.TypeOf((*MockFS)(nil).WalkWithContext), arg0, arg1, arg2)
}

// WalkWithContextAndExclusionPatterns mocks base method
func (m *MockFS) WalkWithContextAndExclusionPatterns(arg0 context.Context, arg1 string, arg2 filepath.WalkFunc, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WalkWithContextAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalkWithContextAndExclusionPatterns indicates an expected call of WalkWithContextAndExclusionPatterns
func (mr *MockFSMockRecorder) WalkWithContextAndExclusionPatterns(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalkWithContextAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).WalkWithContextAndExclusionPatterns), varargs...)
}

// WriteFile mocks base method
func (m *MockFS) WriteFile(arg0 string, arg1 []byte, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockFSMockRecorder) WriteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFS)(nil).WriteFile), arg0, arg1, arg2)
}

// Zip mocks base method
func (m *MockFS) Zip(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zip", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Zip indicates an expected call of Zip
func (mr *MockFSMockRecorder) Zip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zip", reflect.TypeOf((*MockFS)(nil).Zip), arg0, arg1)
}

// ZipWithContext mocks base method
func (m *MockFS) ZipWithContext(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZipWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZipWithContext indicates an expected call of ZipWithContext
func (mr *MockFSMockRecorder) ZipWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipWithContext", reflect.TypeOf((*MockFS)(nil).ZipWithContext), arg0, arg1, arg2)
}

// ZipWithContextAndLimits mocks base method
func (m *MockFS) ZipWithContextAndLimits(arg0 context.Context, arg1, arg2 string, arg3 filesystem.ILimits) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZipWithContextAndLimits", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZipWithContextAndLimits indicates an expected call of ZipWithContextAndLimits
func (mr *MockFSMockRecorder) ZipWithContextAndLimits(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipWithContextAndLimits", reflect.TypeOf((*MockFS)(nil).ZipWithContextAndLimits), arg0, arg1, arg2, arg3)
}

// ZipWithContextAndLimitsAndExclusionPatterns mocks base method
func (m *MockFS) ZipWithContextAndLimitsAndExclusionPatterns(arg0 context.Context, arg1, arg2 string, arg3 filesystem.ILimits, arg4 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZipWithContextAndLimitsAndExclusionPatterns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZipWithContextAndLimitsAndExclusionPatterns indicates an expected call of ZipWithContextAndLimitsAndExclusionPatterns
func (mr *MockFSMockRecorder) ZipWithContextAndLimitsAndExclusionPatterns(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipWithContextAndLimitsAndExclusionPatterns", reflect.TypeOf((*MockFS)(nil).ZipWithContextAndLimitsAndExclusionPatterns), varargs...)
}
