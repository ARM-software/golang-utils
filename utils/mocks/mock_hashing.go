// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/hashing (interfaces: IHash)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_hashing.go -package=mocks github.com/ARM-software/golang-utils/utils/hashing IHash
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHash is a mock of IHash interface.
type MockIHash struct {
	ctrl     *gomock.Controller
	recorder *MockIHashMockRecorder
	isgomock struct{}
}

// MockIHashMockRecorder is the mock recorder for MockIHash.
type MockIHashMockRecorder struct {
	mock *MockIHash
}

// NewMockIHash creates a new mock instance.
func NewMockIHash(ctrl *gomock.Controller) *MockIHash {
	mock := &MockIHash{ctrl: ctrl}
	mock.recorder = &MockIHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHash) EXPECT() *MockIHashMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockIHash) Calculate(reader io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", reader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calculate indicates an expected call of Calculate.
func (mr *MockIHashMockRecorder) Calculate(reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockIHash)(nil).Calculate), reader)
}

// CalculateWithContext mocks base method.
func (m *MockIHash) CalculateWithContext(ctx context.Context, reader io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateWithContext", ctx, reader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateWithContext indicates an expected call of CalculateWithContext.
func (mr *MockIHashMockRecorder) CalculateWithContext(ctx, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateWithContext", reflect.TypeOf((*MockIHash)(nil).CalculateWithContext), ctx, reader)
}

// GetType mocks base method.
func (m *MockIHash) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIHashMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIHash)(nil).GetType))
}
