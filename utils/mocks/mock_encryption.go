// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/encryption (interfaces: IKeyPair)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_encryption.go -package=mocks github.com/ARM-software/golang-utils/utils/encryption IKeyPair
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIKeyPair is a mock of IKeyPair interface.
type MockIKeyPair struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyPairMockRecorder
	isgomock struct{}
}

// MockIKeyPairMockRecorder is the mock recorder for MockIKeyPair.
type MockIKeyPairMockRecorder struct {
	mock *MockIKeyPair
}

// NewMockIKeyPair creates a new mock instance.
func NewMockIKeyPair(ctrl *gomock.Controller) *MockIKeyPair {
	mock := &MockIKeyPair{ctrl: ctrl}
	mock.recorder = &MockIKeyPairMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyPair) EXPECT() *MockIKeyPairMockRecorder {
	return m.recorder
}

// GetPrivateKey mocks base method.
func (m *MockIKeyPair) GetPrivateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockIKeyPairMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockIKeyPair)(nil).GetPrivateKey))
}

// GetPublicKey mocks base method.
func (m *MockIKeyPair) GetPublicKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockIKeyPairMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockIKeyPair)(nil).GetPublicKey))
}

// GoString mocks base method.
func (m *MockIKeyPair) GoString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoString indicates an expected call of GoString.
func (mr *MockIKeyPairMockRecorder) GoString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoString", reflect.TypeOf((*MockIKeyPair)(nil).GoString))
}

// MarshalJSON mocks base method.
func (m *MockIKeyPair) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockIKeyPairMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockIKeyPair)(nil).MarshalJSON))
}

// String mocks base method.
func (m *MockIKeyPair) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIKeyPairMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIKeyPair)(nil).String))
}
