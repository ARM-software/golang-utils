// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/subprocess (interfaces: ICommandIO)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_subprocess.go -package=mocks github.com/ARM-software/golang-utils/utils/subprocess ICommandIO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICommandIO is a mock of ICommandIO interface.
type MockICommandIO struct {
	ctrl     *gomock.Controller
	recorder *MockICommandIOMockRecorder
	isgomock struct{}
}

// MockICommandIOMockRecorder is the mock recorder for MockICommandIO.
type MockICommandIOMockRecorder struct {
	mock *MockICommandIO
}

// NewMockICommandIO creates a new mock instance.
func NewMockICommandIO(ctrl *gomock.Controller) *MockICommandIO {
	mock := &MockICommandIO{ctrl: ctrl}
	mock.recorder = &MockICommandIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandIO) EXPECT() *MockICommandIOMockRecorder {
	return m.recorder
}

// SetError mocks base method.
func (m *MockICommandIO) SetError(arg0 context.Context) io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", arg0)
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// SetError indicates an expected call of SetError.
func (mr *MockICommandIOMockRecorder) SetError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockICommandIO)(nil).SetError), arg0)
}

// SetInput mocks base method.
func (m *MockICommandIO) SetInput(arg0 context.Context) io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInput", arg0)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// SetInput indicates an expected call of SetInput.
func (mr *MockICommandIOMockRecorder) SetInput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInput", reflect.TypeOf((*MockICommandIO)(nil).SetInput), arg0)
}

// SetOutput mocks base method.
func (m *MockICommandIO) SetOutput(arg0 context.Context) io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOutput", arg0)
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockICommandIOMockRecorder) SetOutput(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockICommandIO)(nil).SetOutput), arg0)
}
