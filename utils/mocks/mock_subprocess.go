// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/subprocess (interfaces: ICommandIO)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_subprocess.go -package=mocks github.com/ARM-software/golang-utils/utils/subprocess ICommandIO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICommandIO is a mock of ICommandIO interface.
type MockICommandIO struct {
	ctrl     *gomock.Controller
	recorder *MockICommandIOMockRecorder
	isgomock struct{}
}

// MockICommandIOMockRecorder is the mock recorder for MockICommandIO.
type MockICommandIOMockRecorder struct {
	mock *MockICommandIO
}

// NewMockICommandIO creates a new mock instance.
func NewMockICommandIO(ctrl *gomock.Controller) *MockICommandIO {
	mock := &MockICommandIO{ctrl: ctrl}
	mock.recorder = &MockICommandIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandIO) EXPECT() *MockICommandIOMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockICommandIO) Register(arg0 context.Context) (io.Reader, io.Writer, io.Writer) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(io.Writer)
	ret2, _ := ret[2].(io.Writer)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockICommandIOMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockICommandIO)(nil).Register), arg0)
}
