// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/http (interfaces: IClient,IRetryWaitPolicy,IClientWithHeaders)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_http.go -package=mocks github.com/ARM-software/golang-utils/utils/http IClient,IRetryWaitPolicy,IClientWithHeaders
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
	isgomock struct{}
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIClient)(nil).Close))
}

// Delete mocks base method.
func (m *MockIClient) Delete(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIClientMockRecorder) Delete(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIClient)(nil).Delete), url)
}

// Do mocks base method.
func (m *MockIClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIClient)(nil).Do), req)
}

// Get mocks base method.
func (m *MockIClient) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIClientMockRecorder) Get(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIClient)(nil).Get), url)
}

// Head mocks base method.
func (m *MockIClient) Head(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockIClientMockRecorder) Head(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockIClient)(nil).Head), url)
}

// Options mocks base method.
func (m *MockIClient) Options(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockIClientMockRecorder) Options(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockIClient)(nil).Options), url)
}

// Post mocks base method.
func (m *MockIClient) Post(url, contentType string, body any) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockIClientMockRecorder) Post(url, contentType, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIClient)(nil).Post), url, contentType, body)
}

// PostForm mocks base method.
func (m *MockIClient) PostForm(url string, data url.Values) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", url, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockIClientMockRecorder) PostForm(url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockIClient)(nil).PostForm), url, data)
}

// Put mocks base method.
func (m *MockIClient) Put(url string, body any) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", url, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockIClientMockRecorder) Put(url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIClient)(nil).Put), url, body)
}

// StandardClient mocks base method.
func (m *MockIClient) StandardClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// StandardClient indicates an expected call of StandardClient.
func (mr *MockIClientMockRecorder) StandardClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardClient", reflect.TypeOf((*MockIClient)(nil).StandardClient))
}

// MockIRetryWaitPolicy is a mock of IRetryWaitPolicy interface.
type MockIRetryWaitPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockIRetryWaitPolicyMockRecorder
	isgomock struct{}
}

// MockIRetryWaitPolicyMockRecorder is the mock recorder for MockIRetryWaitPolicy.
type MockIRetryWaitPolicyMockRecorder struct {
	mock *MockIRetryWaitPolicy
}

// NewMockIRetryWaitPolicy creates a new mock instance.
func NewMockIRetryWaitPolicy(ctrl *gomock.Controller) *MockIRetryWaitPolicy {
	mock := &MockIRetryWaitPolicy{ctrl: ctrl}
	mock.recorder = &MockIRetryWaitPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRetryWaitPolicy) EXPECT() *MockIRetryWaitPolicyMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockIRetryWaitPolicy) Apply(min, max time.Duration, attemptNum int, resp *http.Response) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", min, max, attemptNum, resp)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockIRetryWaitPolicyMockRecorder) Apply(min, max, attemptNum, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIRetryWaitPolicy)(nil).Apply), min, max, attemptNum, resp)
}

// MockIClientWithHeaders is a mock of IClientWithHeaders interface.
type MockIClientWithHeaders struct {
	ctrl     *gomock.Controller
	recorder *MockIClientWithHeadersMockRecorder
	isgomock struct{}
}

// MockIClientWithHeadersMockRecorder is the mock recorder for MockIClientWithHeaders.
type MockIClientWithHeadersMockRecorder struct {
	mock *MockIClientWithHeaders
}

// NewMockIClientWithHeaders creates a new mock instance.
func NewMockIClientWithHeaders(ctrl *gomock.Controller) *MockIClientWithHeaders {
	mock := &MockIClientWithHeaders{ctrl: ctrl}
	mock.recorder = &MockIClientWithHeadersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientWithHeaders) EXPECT() *MockIClientWithHeadersMockRecorder {
	return m.recorder
}

// AppendHeader mocks base method.
func (m *MockIClientWithHeaders) AppendHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendHeader", key, value)
}

// AppendHeader indicates an expected call of AppendHeader.
func (mr *MockIClientWithHeadersMockRecorder) AppendHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHeader", reflect.TypeOf((*MockIClientWithHeaders)(nil).AppendHeader), key, value)
}

// ClearHeaders mocks base method.
func (m *MockIClientWithHeaders) ClearHeaders() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearHeaders")
}

// ClearHeaders indicates an expected call of ClearHeaders.
func (mr *MockIClientWithHeadersMockRecorder) ClearHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearHeaders", reflect.TypeOf((*MockIClientWithHeaders)(nil).ClearHeaders))
}

// Close mocks base method.
func (m *MockIClientWithHeaders) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIClientWithHeadersMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIClientWithHeaders)(nil).Close))
}

// Delete mocks base method.
func (m *MockIClientWithHeaders) Delete(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIClientWithHeadersMockRecorder) Delete(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIClientWithHeaders)(nil).Delete), url)
}

// Do mocks base method.
func (m *MockIClientWithHeaders) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIClientWithHeadersMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIClientWithHeaders)(nil).Do), req)
}

// Get mocks base method.
func (m *MockIClientWithHeaders) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIClientWithHeadersMockRecorder) Get(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIClientWithHeaders)(nil).Get), url)
}

// Head mocks base method.
func (m *MockIClientWithHeaders) Head(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockIClientWithHeadersMockRecorder) Head(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockIClientWithHeaders)(nil).Head), url)
}

// Options mocks base method.
func (m *MockIClientWithHeaders) Options(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockIClientWithHeadersMockRecorder) Options(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockIClientWithHeaders)(nil).Options), url)
}

// Post mocks base method.
func (m *MockIClientWithHeaders) Post(url, contentType string, body any) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockIClientWithHeadersMockRecorder) Post(url, contentType, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIClientWithHeaders)(nil).Post), url, contentType, body)
}

// PostForm mocks base method.
func (m *MockIClientWithHeaders) PostForm(url string, data url.Values) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", url, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockIClientWithHeadersMockRecorder) PostForm(url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockIClientWithHeaders)(nil).PostForm), url, data)
}

// Put mocks base method.
func (m *MockIClientWithHeaders) Put(url string, body any) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", url, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockIClientWithHeadersMockRecorder) Put(url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIClientWithHeaders)(nil).Put), url, body)
}

// RemoveHeader mocks base method.
func (m *MockIClientWithHeaders) RemoveHeader(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHeader", key)
}

// RemoveHeader indicates an expected call of RemoveHeader.
func (mr *MockIClientWithHeadersMockRecorder) RemoveHeader(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHeader", reflect.TypeOf((*MockIClientWithHeaders)(nil).RemoveHeader), key)
}

// StandardClient mocks base method.
func (m *MockIClientWithHeaders) StandardClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// StandardClient indicates an expected call of StandardClient.
func (mr *MockIClientWithHeadersMockRecorder) StandardClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardClient", reflect.TypeOf((*MockIClientWithHeaders)(nil).StandardClient))
}
