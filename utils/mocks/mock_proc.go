// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/proc (interfaces: IProcess)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_proc.go -package=mocks github.com/ARM-software/golang-utils/utils/proc IProcess
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proc "github.com/ARM-software/golang-utils/utils/proc"
	gomock "go.uber.org/mock/gomock"
)

// MockIProcess is a mock of IProcess interface.
type MockIProcess struct {
	ctrl     *gomock.Controller
	recorder *MockIProcessMockRecorder
	isgomock struct{}
}

// MockIProcessMockRecorder is the mock recorder for MockIProcess.
type MockIProcessMockRecorder struct {
	mock *MockIProcess
}

// NewMockIProcess creates a new mock instance.
func NewMockIProcess(ctrl *gomock.Controller) *MockIProcess {
	mock := &MockIProcess{ctrl: ctrl}
	mock.recorder = &MockIProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProcess) EXPECT() *MockIProcessMockRecorder {
	return m.recorder
}

// Children mocks base method.
func (m *MockIProcess) Children(ctx context.Context) ([]proc.IProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", ctx)
	ret0, _ := ret[0].([]proc.IProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Children indicates an expected call of Children.
func (mr *MockIProcessMockRecorder) Children(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockIProcess)(nil).Children), ctx)
}

// Cmdline mocks base method.
func (m *MockIProcess) Cmdline() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cmdline")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cmdline indicates an expected call of Cmdline.
func (mr *MockIProcessMockRecorder) Cmdline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cmdline", reflect.TypeOf((*MockIProcess)(nil).Cmdline))
}

// Cwd mocks base method.
func (m *MockIProcess) Cwd() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cwd")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cwd indicates an expected call of Cwd.
func (mr *MockIProcessMockRecorder) Cwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cwd", reflect.TypeOf((*MockIProcess)(nil).Cwd))
}

// Environ mocks base method.
func (m *MockIProcess) Environ(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environ indicates an expected call of Environ.
func (mr *MockIProcessMockRecorder) Environ(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockIProcess)(nil).Environ), ctx)
}

// Executable mocks base method.
func (m *MockIProcess) Executable() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	return ret0
}

// Executable indicates an expected call of Executable.
func (mr *MockIProcessMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockIProcess)(nil).Executable))
}

// IsRunning mocks base method.
func (m *MockIProcess) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockIProcessMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockIProcess)(nil).IsRunning))
}

// KillWithChildren mocks base method.
func (m *MockIProcess) KillWithChildren(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillWithChildren", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillWithChildren indicates an expected call of KillWithChildren.
func (mr *MockIProcessMockRecorder) KillWithChildren(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillWithChildren", reflect.TypeOf((*MockIProcess)(nil).KillWithChildren), arg0)
}

// Name mocks base method.
func (m *MockIProcess) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIProcessMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIProcess)(nil).Name))
}

// PPid mocks base method.
func (m *MockIProcess) PPid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PPid")
	ret0, _ := ret[0].(int)
	return ret0
}

// PPid indicates an expected call of PPid.
func (mr *MockIProcessMockRecorder) PPid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PPid", reflect.TypeOf((*MockIProcess)(nil).PPid))
}

// Parent mocks base method.
func (m *MockIProcess) Parent() proc.IProcess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(proc.IProcess)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockIProcessMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockIProcess)(nil).Parent))
}

// Pid mocks base method.
func (m *MockIProcess) Pid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockIProcessMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockIProcess)(nil).Pid))
}

// Terminate mocks base method.
func (m *MockIProcess) Terminate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockIProcessMockRecorder) Terminate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockIProcess)(nil).Terminate), arg0)
}
