// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ARM-software/golang-utils/utils/subprocess/supervisor (interfaces: ISupervisor)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_supervisor.go -package=mocks github.com/ARM-software/golang-utils/utils/subprocess/supervisor ISupervisor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockISupervisor is a mock of ISupervisor interface.
type MockISupervisor struct {
	ctrl     *gomock.Controller
	recorder *MockISupervisorMockRecorder
	isgomock struct{}
}

// MockISupervisorMockRecorder is the mock recorder for MockISupervisor.
type MockISupervisorMockRecorder struct {
	mock *MockISupervisor
}

// NewMockISupervisor creates a new mock instance.
func NewMockISupervisor(ctrl *gomock.Controller) *MockISupervisor {
	mock := &MockISupervisor{ctrl: ctrl}
	mock.recorder = &MockISupervisorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISupervisor) EXPECT() *MockISupervisorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISupervisor) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockISupervisorMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISupervisor)(nil).Run), ctx)
}
