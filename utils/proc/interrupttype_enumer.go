// Code generated by "enumer -type=InterruptType -text -json -yaml"; DO NOT EDIT.

package proc

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_InterruptTypeName_0      = "SigInt"
	_InterruptTypeLowerName_0 = "sigint"
	_InterruptTypeName_1      = "SigKill"
	_InterruptTypeLowerName_1 = "sigkill"
	_InterruptTypeName_2      = "SigTerm"
	_InterruptTypeLowerName_2 = "sigterm"
)

var (
	_InterruptTypeIndex_0 = [...]uint8{0, 6}
	_InterruptTypeIndex_1 = [...]uint8{0, 7}
	_InterruptTypeIndex_2 = [...]uint8{0, 7}
)

func (i InterruptType) String() string {
	switch {
	case i == 2:
		return _InterruptTypeName_0
	case i == 9:
		return _InterruptTypeName_1
	case i == 15:
		return _InterruptTypeName_2
	default:
		return fmt.Sprintf("InterruptType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InterruptTypeNoOp() {
	var x [1]struct{}
	_ = x[SigInt-(2)]
	_ = x[SigKill-(9)]
	_ = x[SigTerm-(15)]
}

var _InterruptTypeValues = []InterruptType{SigInt, SigKill, SigTerm}

var _InterruptTypeNameToValueMap = map[string]InterruptType{
	_InterruptTypeName_0[0:6]:      SigInt,
	_InterruptTypeLowerName_0[0:6]: SigInt,
	_InterruptTypeName_1[0:7]:      SigKill,
	_InterruptTypeLowerName_1[0:7]: SigKill,
	_InterruptTypeName_2[0:7]:      SigTerm,
	_InterruptTypeLowerName_2[0:7]: SigTerm,
}

var _InterruptTypeNames = []string{
	_InterruptTypeName_0[0:6],
	_InterruptTypeName_1[0:7],
	_InterruptTypeName_2[0:7],
}

// InterruptTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InterruptTypeString(s string) (InterruptType, error) {
	if val, ok := _InterruptTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InterruptTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InterruptType values", s)
}

// InterruptTypeValues returns all values of the enum
func InterruptTypeValues() []InterruptType {
	return _InterruptTypeValues
}

// InterruptTypeStrings returns a slice of all String values of the enum
func InterruptTypeStrings() []string {
	strs := make([]string, len(_InterruptTypeNames))
	copy(strs, _InterruptTypeNames)
	return strs
}

// IsAInterruptType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InterruptType) IsAInterruptType() bool {
	for _, v := range _InterruptTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for InterruptType
func (i InterruptType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for InterruptType
func (i *InterruptType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("InterruptType should be a string, got %s", data)
	}

	var err error
	*i, err = InterruptTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for InterruptType
func (i InterruptType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for InterruptType
func (i *InterruptType) UnmarshalText(text []byte) error {
	var err error
	*i, err = InterruptTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for InterruptType
func (i InterruptType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for InterruptType
func (i *InterruptType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = InterruptTypeString(s)
	return err
}
