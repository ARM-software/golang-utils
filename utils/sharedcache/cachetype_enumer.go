// Code generated by "enumer -type=CacheType -text -json -yaml"; DO NOT EDIT.

package sharedcache

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CacheTypeName = "CacheMutableCacheImmutable"

var _CacheTypeIndex = [...]uint8{0, 12, 26}

const _CacheTypeLowerName = "cachemutablecacheimmutable"

func (i CacheType) String() string {
	if i < 0 || i >= CacheType(len(_CacheTypeIndex)-1) {
		return fmt.Sprintf("CacheType(%d)", i)
	}
	return _CacheTypeName[_CacheTypeIndex[i]:_CacheTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CacheTypeNoOp() {
	var x [1]struct{}
	_ = x[CacheMutable-(0)]
	_ = x[CacheImmutable-(1)]
}

var _CacheTypeValues = []CacheType{CacheMutable, CacheImmutable}

var _CacheTypeNameToValueMap = map[string]CacheType{
	_CacheTypeName[0:12]:       CacheMutable,
	_CacheTypeLowerName[0:12]:  CacheMutable,
	_CacheTypeName[12:26]:      CacheImmutable,
	_CacheTypeLowerName[12:26]: CacheImmutable,
}

var _CacheTypeNames = []string{
	_CacheTypeName[0:12],
	_CacheTypeName[12:26],
}

// CacheTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CacheTypeString(s string) (CacheType, error) {
	if val, ok := _CacheTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CacheTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CacheType values", s)
}

// CacheTypeValues returns all values of the enum
func CacheTypeValues() []CacheType {
	return _CacheTypeValues
}

// CacheTypeStrings returns a slice of all String values of the enum
func CacheTypeStrings() []string {
	strs := make([]string, len(_CacheTypeNames))
	copy(strs, _CacheTypeNames)
	return strs
}

// IsACacheType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CacheType) IsACacheType() bool {
	for _, v := range _CacheTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CacheType
func (i CacheType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CacheType
func (i *CacheType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CacheType should be a string, got %s", data)
	}

	var err error
	*i, err = CacheTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CacheType
func (i CacheType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CacheType
func (i *CacheType) UnmarshalText(text []byte) error {
	var err error
	*i, err = CacheTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CacheType
func (i CacheType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CacheType
func (i *CacheType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CacheTypeString(s)
	return err
}
