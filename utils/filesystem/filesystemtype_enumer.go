// Code generated by "enumer -type=FilesystemType -text -json -yaml"; DO NOT EDIT.

package filesystem

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FilesystemTypeName = "StandardFSInMemoryFSEmbedCustomZipFSTarFS"

var _FilesystemTypeIndex = [...]uint8{0, 10, 20, 25, 31, 36, 41}

const _FilesystemTypeLowerName = "standardfsinmemoryfsembedcustomzipfstarfs"

func (i FilesystemType) String() string {
	if i < 0 || i >= FilesystemType(len(_FilesystemTypeIndex)-1) {
		return fmt.Sprintf("FilesystemType(%d)", i)
	}
	return _FilesystemTypeName[_FilesystemTypeIndex[i]:_FilesystemTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FilesystemTypeNoOp() {
	var x [1]struct{}
	_ = x[StandardFS-(0)]
	_ = x[InMemoryFS-(1)]
	_ = x[Embed-(2)]
	_ = x[Custom-(3)]
	_ = x[ZipFS-(4)]
	_ = x[TarFS-(5)]
}

var _FilesystemTypeValues = []FilesystemType{StandardFS, InMemoryFS, Embed, Custom, ZipFS, TarFS}

var _FilesystemTypeNameToValueMap = map[string]FilesystemType{
	_FilesystemTypeName[0:10]:       StandardFS,
	_FilesystemTypeLowerName[0:10]:  StandardFS,
	_FilesystemTypeName[10:20]:      InMemoryFS,
	_FilesystemTypeLowerName[10:20]: InMemoryFS,
	_FilesystemTypeName[20:25]:      Embed,
	_FilesystemTypeLowerName[20:25]: Embed,
	_FilesystemTypeName[25:31]:      Custom,
	_FilesystemTypeLowerName[25:31]: Custom,
	_FilesystemTypeName[31:36]:      ZipFS,
	_FilesystemTypeLowerName[31:36]: ZipFS,
	_FilesystemTypeName[36:41]:      TarFS,
	_FilesystemTypeLowerName[36:41]: TarFS,
}

var _FilesystemTypeNames = []string{
	_FilesystemTypeName[0:10],
	_FilesystemTypeName[10:20],
	_FilesystemTypeName[20:25],
	_FilesystemTypeName[25:31],
	_FilesystemTypeName[31:36],
	_FilesystemTypeName[36:41],
}

// FilesystemTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FilesystemTypeString(s string) (FilesystemType, error) {
	if val, ok := _FilesystemTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FilesystemTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FilesystemType values", s)
}

// FilesystemTypeValues returns all values of the enum
func FilesystemTypeValues() []FilesystemType {
	return _FilesystemTypeValues
}

// FilesystemTypeStrings returns a slice of all String values of the enum
func FilesystemTypeStrings() []string {
	strs := make([]string, len(_FilesystemTypeNames))
	copy(strs, _FilesystemTypeNames)
	return strs
}

// IsAFilesystemType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FilesystemType) IsAFilesystemType() bool {
	for _, v := range _FilesystemTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FilesystemType
func (i FilesystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FilesystemType
func (i *FilesystemType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FilesystemType should be a string, got %s", data)
	}

	var err error
	*i, err = FilesystemTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FilesystemType
func (i FilesystemType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FilesystemType
func (i *FilesystemType) UnmarshalText(text []byte) error {
	var err error
	*i, err = FilesystemTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for FilesystemType
func (i FilesystemType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for FilesystemType
func (i *FilesystemType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FilesystemTypeString(s)
	return err
}
